# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

trigger:
- master
- release/*

pool:
  vmImage: 'windows-latest'

name: $(Rev:r)

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  location: 'Australia Southeast'
  acrHostName: 'cswebappdocker$(Build.BuildNumber)acr.azurecr.io'
  acrName: 'cswebappdocker$(Build.BuildNumber)acr'
  rgName: 'cswebappdocker$(Build.BuildNumber)-rg'
  imageName: 'cswebappdocker$(Build.BuildNumber)'
  webAppName: 'cswebappdocker$(Build.BuildNumber)'
  StagingServerName: 'BunningsDBServer'
  StagingDatabaseName: 'SalesReport'
  AdminUser: 'SA'
  AdminPassword: 'sales_01'
  SQLFile: '$(System.DefaultWorkingDirectory)/sql'

steps:
- task: AzureResourceGroupDeployment@2
  displayName: 'Azure Deployment:Create Azure Container Registry'
  inputs:
    azureSubscription: 'AzureSC'
    resourceGroupName: '$(rgName)'
    location: $(location)
    csmFile: '$(System.DefaultWorkingDirectory)/**/containerRegistry-template.json'
    overrideParameters: '-registryName "$(acrName)" -registryLocation "$(location)" -registrySku standard'

- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  displayName: 'Nuget Restore'
  inputs:
    restoreSolution: '$(solution)'

- task: VSBuild@1
  displayName: 'Build Solution'
  inputs:
    solution: '$(solution)'
    msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactStagingDirectory)"'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: VSTest@2
  displayName: 'Test'
  inputs:
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: PublishSymbols@1
  displayName: 'Publish symbols'
  inputs:
    SearchPattern: '**\bin\**\*.pdb'
  continueOnError: true

- task: CopyFiles@1
  inputs:
   SourceFolder: '$(build.sourcesdirectory)'
   TargetFolder: '$(build.artifactsstagingdirectory)'

- task: Docker@1
  displayName: 'Build container image'
  inputs:
    azureSubscriptionEndpoint: 'AzureSC'
    azureContainerRegistry: '$(acrHostName)'
    imageName: '$(imageName):$(Build.BuildId)'
    useDefaultContext: false
    buildContext: '$(build.artifactsstagingdirectory)'
  condition: contains(variables['build.sourceBranch'], 'release/')

    # Push container image
- task: Docker@1
  displayName: 'Push container image'
  inputs:
    azureSubscriptionEndpoint: 'AzureSC'
    azureContainerRegistry: '$(acrHostName)'
    command: 'Push an image'
    imageName: '$(imageName):$(Build.BuildId)'
  condition: contains(variables['build.sourceBranch'], 'release/')

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'
    artifact: drop
    condition: succeededOrFailed()

# - task: SqlAzureDeployment@1
#   condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'release'))
#   inputs:
#     azureSubscription: 'AzureSC'
#     ServerName: '$(StagingServerName)'
#     DatabaseName: '$(StagingDatabaseName)'
#     SqlUsername: '$(AdminUser)'
#     SqlPassword: '$(AdminPassword)'
#     SQLFile: '$(SQLFile)'

- task: AzureRmWebAppDeployment@4
  displayName: 'Deploy Azure App Service'
  inputs:
    azureSubscription: 'AzureSC'
    resourceGroupName: '$(rgName)'
    location: '$(location)'
    csmFile: '$(Pipeline.Workspace)/**/container-webapp-template.json'
    overrideParameters: '-webAppName $(webAppName) -hostingPlanName $(webAppName) -appInsightsLocation "$(location)" -sku "S1 Standard" -registryName $(acrName) -registryLocation "$(location)" -registrySku standard -imageName $(imageName):$(Build.BuildId)'
  condition: contains(variables['build.sourceBranch'], 'release/')

- task: AzureRmWebAppDeployment@3
  displayName: 'Deploy Azure App Service'
  inputs:
    azureSubscription: 'AzureSC'
    appType: applinux
    WebAppName: $(webAppName)
    DockerNamespace: $(acrHostName)
    DockerRepository: $(webAppName)
    DockerImageTag: '$(Build.BuildId)'
    WebAppUri: salesreportapp
    TakeAppOfflineFlag: true
    UseWebDeploy: true
    RenameFilesFlag: true
  condition: contains(variables['build.sourceBranch'], 'release/')

